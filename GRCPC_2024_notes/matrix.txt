MATRIX TRAVERSAL

SURROUNDED REGION CAPTURE PROBLEM

class Solution {
    public void solve(char[][] board) {
        
    if(board.length == 0){
            return;
        }
        int n = board.length;
        int m = board[0].length;
        for(int  i=0; i<n; i++) { //for corner rows
            solve(board, i, 0, n, m);
            solve(board, i, m-1, n, m);
        }
        for(int  i=1; i<m-1; i++) { //for corner columns
            solve(board, 0, i, n, m);
            solve(board, n-1, i, n, m);
        }
        for(int i =0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if(board[i][j] == 'O') { //captured regions, becoz not conencted to edges
                    board[i][j] = 'X';
                }
                if(board[i][j] == 'D') { //uncaptured regions.
                    board[i][j] = 'O';
                }
            }
        }
        
    }
    public void solve(char[][] board, int x, int y, int n, int m){
        if(x < 0 || x >= n || y < 0 || y >= m || board[x][y] != 'O') {
            return;
        }
        board[x][y] = 'D'; //check neighbours
        solve(board, x+1, y, n, m);
        solve(board, x-1, y, n, m);
        solve(board, x, y+1, n, m);
        solve(board, x, y-1, n, m);
    }
}


##num of islands

class Solution {
    public int numIslands(char[][] grid) {
        int count=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        return count;
    }
    private void dfs(char[][] grid,int i,int j){
        if(i<0 || j<0 || i == grid.length || j == grid[0].length)
            return;
        if(grid[i][j] != '1')
            return;
        else
            grid[i][j] = '2';
        dfs(grid,i-1,j);
        dfs(grid,i+1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}
